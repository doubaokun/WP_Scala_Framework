/**
 * Generated by Scrooge
 *   version: 3.16.40
 *   rev: c3bbc209edcec136fff0d50ec6d0bf27d31c6aa2
 *   built at: 20140917-102732
 */
package com.whitepages.generated

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

import com.persist.JsonOps._
import com.persist.json._
import com.persist.Exceptions.MappingException
import scala.util.Try


object Compound extends ThriftStructCodec3[Compound] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Compound")
  val C1Field = new TField("c1", TType.STRING, 1)
  val C1FieldManifest = implicitly[Manifest[String]]
  val C2Field = new TField("c2", TType.I16, 2)
  val C2FieldManifest = implicitly[Manifest[Short]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      C1Field,
      false,
      C1FieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      C2Field,
      false,
      C2FieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Compound) {
  }

  def withoutPassthroughFields(original: Compound): Compound =
    new Immutable(
      c1 =
        {
          val field = original.c1
          field
        },
      c2 =
        {
          val field = original.c2
          field
        }
    )

  override def encode(_item: Compound, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): Compound = {
    var c1: String = null
    var c2: Short = 0
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING => {
                c1 = readC1Value(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'c1' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.I16 => {
                c2 = readC2Value(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.I16
            
                throw new TProtocolException(
                  "Received wrong type for field 'c2' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      c1,
      c2,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    c1: String,
    c2: Short
  ): Compound =
    new Immutable(
      c1,
      c2
    )

  def unapply(_item: Compound): Option[scala.Product2[String, Short]] = Some(_item)

  implicit val jsonReadCodec = new ReadCodec[Compound] {
    def read(json: Json) = {
      val map = ReadCodec.castOrThrow(json)
            val fieldValuec1 = map.getOrElse("c1", throw new MappingException(s"Expected field c1 on JsonObject $map"))
            val fieldValuec2 = map.getOrElse("c2", throw new MappingException(s"Expected field c2 on JsonObject $map"))
      
      Compound(      c1 = Try(com.persist.json.read[String](fieldValuec1)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"c1/$path")
      }.get
      ,      c2 = Try(com.persist.json.read[Short](fieldValuec2)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"c2/$path")
      }.get
      
      )
    }
   }
  implicit val jsonWriteCodec = new WriteCodec[Compound] {
    def write(obj: Compound) = {
      val fields = List(        
        Some("c1" -> com.persist.json.toJson(obj.c1)),        
        Some("c2" -> com.persist.json.toJson(obj.c2))
      )
      fields.flatten.toMap
    }
  }

  import com.twitter.scrooge.serialization._

  implicit val thriftCodec = new ThriftCodec[Compound] {
    def decode(protocol: TProtocol): Compound = Compound.decode(protocol)
    def encode(obj: Compound, protocol: TProtocol) { Compound.encode(obj, protocol) }
  }

  private def readC1Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeC1Field(c1_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(C1Field)
    writeC1Value(c1_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeC1Value(c1_item: String, _oprot: TProtocol) {
    _oprot.writeString(c1_item)
  }

  private def readC2Value(_iprot: TProtocol): Short = {
    _iprot.readI16()
  }

  private def writeC2Field(c2_item: Short, _oprot: TProtocol) {
    _oprot.writeFieldBegin(C2Field)
    writeC2Value(c2_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeC2Value(c2_item: Short, _oprot: TProtocol) {
    _oprot.writeI16(c2_item)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[Compound] {
    override def encode(_item: Compound, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Compound = Compound.decode(_iprot)

    import com.twitter.scrooge.serialization._

    implicit val thriftCodec = Compound.thriftCodec
  }

  /**
   * The default read-only implementation of Compound.  You typically should not need to
   * directly reference this class; instead, use the Compound.apply method to construct
   * new instances.
   */
  class Immutable(
    val c1: String,
    val c2: Short,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends Compound {
    def this(
      c1: String,
      c2: Short
    ) = this(
      c1,
      c2,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the Compound trait with additional state or
   * behavior and implement the read-only methods from Compound using an underlying
   * instance.
   */
  trait Proxy extends Compound {
    protected def _underlying_Compound: Compound
    override def c1: String = _underlying_Compound.c1
    override def c2: Short = _underlying_Compound.c2
    override def _passthroughFields = _underlying_Compound._passthroughFields
  }
}

trait Compound
  extends ThriftStruct
  with scala.Product2[String, Short]
  with java.io.Serializable
{
  import Compound._

  def c1: String
  def c2: Short

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = c1
  def _2 = c2

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (c1 ne null) {
              writeC1Value(c1, _oprot)
              Some(Compound.C1Field)
            } else {
              None
            }
          case 2 =>
            if (true) {
              writeC2Value(c2, _oprot)
              Some(Compound.C2Field)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Compound = {
    var c1: String = this.c1
    var c2: Short = this.c2
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        c1 = readC1Value(_blob.read)
      case 2 =>
        c2 = readC2Value(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      c1,
      c2,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Compound = {
    var c1: String = this.c1
    var c2: Short = this.c2

    _fieldId match {
      case 1 =>
        c1 = null
      case 2 =>
        c2 = 0
      case _ =>
    }
    new Immutable(
      c1,
      c2,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetC1: Compound = unsetField(1)

  def unsetC2: Compound = unsetField(2)


  override def write(_oprot: TProtocol) {
    Compound.validate(this)
    _oprot.writeStructBegin(Struct)
    if (c1 ne null) writeC1Field(c1, _oprot)
    writeC2Field(c2, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    c1: String = this.c1,
    c2: Short = this.c2,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Compound =
    new Immutable(
      c1,
      c2,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Compound]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[Compound]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.c1
    case 1 => this.c2
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Compound"
}