/**
 * Generated by Scrooge
 *   version: 3.16.40
 *   rev: c3bbc209edcec136fff0d50ec6d0bf27d31c6aa2
 *   built at: 20140917-102732
 */
package com.whitepages.generated

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

import com.persist.JsonOps._
import com.persist.json._
import com.persist.Exceptions.MappingException
import scala.util.Try


object ServerException extends ThriftStructCodec3[ServerException] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("ServerException")
  val ClassnameField = new TField("classname", TType.STRING, 1)
  val ClassnameFieldManifest = implicitly[Manifest[String]]
  val MessageField = new TField("message", TType.STRING, 2)
  val MessageFieldManifest = implicitly[Manifest[String]]
  val BacktraceField = new TField("backtrace", TType.LIST, 3)
  val BacktraceFieldManifest = implicitly[Manifest[Seq[String]]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      ClassnameField,
      true,
      ClassnameFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      MessageField,
      true,
      MessageFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      BacktraceField,
      true,
      BacktraceFieldManifest,
      None,
      Some(implicitly[Manifest[String]]),
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: ServerException) {
  }

  def withoutPassthroughFields(original: ServerException): ServerException =
    new ServerException(
      classname =
        {
          val field = original.classname
          field.map { field =>
            field
          }
        },
      message =
        {
          val field = original.message
          field.map { field =>
            field
          }
        },
      backtrace =
        {
          val field = original.backtrace
          field.map { field =>
            field.map { field =>
              field
            }
          }
        }
    )

  override def encode(_item: ServerException, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): ServerException = {
    var classname: Option[String] = None
    var message: Option[String] = None
    var backtrace: Option[Seq[String]] = None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING => {
                classname = Some(readClassnameValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'classname' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING => {
                message = Some(readMessageValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'message' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.LIST => {
                backtrace = Some(readBacktraceValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.LIST
            
                throw new TProtocolException(
                  "Received wrong type for field 'backtrace' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new ServerException(
      classname,
      message,
      backtrace,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    classname: Option[String] = None,
    message: Option[String] = None,
    backtrace: Option[Seq[String]] = None
  ): ServerException =
    new ServerException(
      classname,
      message,
      backtrace
    )

  def unapply(_item: ServerException): Option[scala.Product3[Option[String], Option[String], Option[Seq[String]]]] = Some(_item)

  implicit val jsonReadCodec = new ReadCodec[ServerException] {
    def read(json: Json) = {
      val map = ReadCodec.castOrThrow(json)
            val fieldValueclassname = map.getOrElse("classname", jnull)
            val fieldValuemessage = map.getOrElse("message", jnull)
            val fieldValuebacktrace = map.getOrElse("backtrace", jnull)
      
      ServerException(      classname = Try(com.persist.json.read[Option[String]](fieldValueclassname)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"classname/$path")
      }.get
      ,      message = Try(com.persist.json.read[Option[String]](fieldValuemessage)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"message/$path")
      }.get
      ,      backtrace = Try(com.persist.json.read[Option[Seq[String]]](fieldValuebacktrace)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"backtrace/$path")
      }.get
      
      )
    }
   }
  implicit val jsonWriteCodec = new WriteCodec[ServerException] {
    def write(obj: ServerException) = {
      val fields = List(        if(obj.classname.isDefined) Some("classname" -> com.persist.json.toJson(obj.classname.get)) else None
        ,        if(obj.message.isDefined) Some("message" -> com.persist.json.toJson(obj.message.get)) else None
        ,        if(obj.backtrace.isDefined) Some("backtrace" -> com.persist.json.toJson(obj.backtrace.get)) else None
        
      )
      fields.flatten.toMap
    }
  }

  import com.twitter.scrooge.serialization._

  implicit val thriftCodec = new ThriftCodec[ServerException] {
    def decode(protocol: TProtocol): ServerException = ServerException.decode(protocol)
    def encode(obj: ServerException, protocol: TProtocol) { ServerException.encode(obj, protocol) }
  }

  private def readClassnameValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeClassnameField(classname_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(ClassnameField)
    writeClassnameValue(classname_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeClassnameValue(classname_item: String, _oprot: TProtocol) {
    _oprot.writeString(classname_item)
  }

  private def readMessageValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeMessageField(message_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(MessageField)
    writeMessageValue(message_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeMessageValue(message_item: String, _oprot: TProtocol) {
    _oprot.writeString(message_item)
  }

  private def readBacktraceValue(_iprot: TProtocol): Seq[String] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[String](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
            _iprot.readString()
  
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  private def writeBacktraceField(backtrace_item: Seq[String], _oprot: TProtocol) {
    _oprot.writeFieldBegin(BacktraceField)
    writeBacktraceValue(backtrace_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeBacktraceValue(backtrace_item: Seq[String], _oprot: TProtocol) {
    _oprot.writeListBegin(new TList(TType.STRING, backtrace_item.size))
    backtrace_item.foreach { backtrace_item_element =>
      _oprot.writeString(backtrace_item_element)
    }
    _oprot.writeListEnd()
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

}

class ServerException(
    val classname: Option[String],
    val message: Option[String],
    val backtrace: Option[Seq[String]],
    val _passthroughFields: immutable$Map[Short, TFieldBlob])
  extends ThriftException with ThriftStruct
  with scala.Product3[Option[String], Option[String], Option[Seq[String]]]
  with java.io.Serializable
{
  import ServerException._
    def this(
      classname: Option[String] = None,
      message: Option[String] = None,
      backtrace: Option[Seq[String]] = None
    ) = this(
      classname,
      message,
      backtrace,
      Map.empty
    )

  def _1 = classname
  def _2 = message
  def _3 = backtrace

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (classname.isDefined) {
              writeClassnameValue(classname.get, _oprot)
              Some(ServerException.ClassnameField)
            } else {
              None
            }
          case 2 =>
            if (message.isDefined) {
              writeMessageValue(message.get, _oprot)
              Some(ServerException.MessageField)
            } else {
              None
            }
          case 3 =>
            if (backtrace.isDefined) {
              writeBacktraceValue(backtrace.get, _oprot)
              Some(ServerException.BacktraceField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): ServerException = {
    var classname: Option[String] = this.classname
    var message: Option[String] = this.message
    var backtrace: Option[Seq[String]] = this.backtrace
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        classname = Some(readClassnameValue(_blob.read))
      case 2 =>
        message = Some(readMessageValue(_blob.read))
      case 3 =>
        backtrace = Some(readBacktraceValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new ServerException(
      classname,
      message,
      backtrace,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): ServerException = {
    var classname: Option[String] = this.classname
    var message: Option[String] = this.message
    var backtrace: Option[Seq[String]] = this.backtrace

    _fieldId match {
      case 1 =>
        classname = None
      case 2 =>
        message = None
      case 3 =>
        backtrace = None
      case _ =>
    }
    new ServerException(
      classname,
      message,
      backtrace,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetClassname: ServerException = unsetField(1)

  def unsetMessage: ServerException = unsetField(2)

  def unsetBacktrace: ServerException = unsetField(3)


  override def write(_oprot: TProtocol) {
    ServerException.validate(this)
    _oprot.writeStructBegin(Struct)
    if (classname.isDefined) writeClassnameField(classname.get, _oprot)
    if (message.isDefined) writeMessageField(message.get, _oprot)
    if (backtrace.isDefined) writeBacktraceField(backtrace.get, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    classname: Option[String] = this.classname,
    message: Option[String] = this.message,
    backtrace: Option[Seq[String]] = this.backtrace,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): ServerException =
    new ServerException(
      classname,
      message,
      backtrace,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[ServerException]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[ServerException]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)

  override def getMessage: String = String.valueOf(message)

  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => this.classname
    case 1 => this.message
    case 2 => this.backtrace
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "ServerException"
}