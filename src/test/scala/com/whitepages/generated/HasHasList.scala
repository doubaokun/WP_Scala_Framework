/**
 * Generated by Scrooge
 *   version: 3.16.40
 *   rev: c3bbc209edcec136fff0d50ec6d0bf27d31c6aa2
 *   built at: 20140917-102732
 */
package com.whitepages.generated

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

import com.persist.JsonOps._
import com.persist.json._
import com.persist.Exceptions.MappingException
import scala.util.Try


object HasHasList extends ThriftStructCodec3[HasHasList] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("HasHasList")
  val HasLongsField = new TField("hasLongs", TType.LIST, 1)
  val HasLongsFieldManifest = implicitly[Manifest[Seq[HasLong]]]
  val HasListField = new TField("hasList", TType.STRUCT, 2)
  val HasListFieldManifest = implicitly[Manifest[HasList]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      HasLongsField,
      true,
      HasLongsFieldManifest,
      None,
      Some(implicitly[Manifest[HasLong]]),
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      HasListField,
      true,
      HasListFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: HasHasList) {
  }

  def withoutPassthroughFields(original: HasHasList): HasHasList =
    new Immutable(
      hasLongs =
        {
          val field = original.hasLongs
          field.map { field =>
            field.map { field =>
              HasLong.withoutPassthroughFields(field)
            }
          }
        },
      hasList =
        {
          val field = original.hasList
          field.map { field =>
            HasList.withoutPassthroughFields(field)
          }
        }
    )

  override def encode(_item: HasHasList, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): HasHasList = {
    var hasLongs: Option[Seq[HasLong]] = None
    var hasList: Option[HasList] = None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.LIST => {
                hasLongs = Some(readHasLongsValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.LIST
            
                throw new TProtocolException(
                  "Received wrong type for field 'hasLongs' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRUCT => {
                hasList = Some(readHasListValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.STRUCT
            
                throw new TProtocolException(
                  "Received wrong type for field 'hasList' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      hasLongs,
      hasList,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    hasLongs: Option[Seq[HasLong]] = None,
    hasList: Option[HasList] = None
  ): HasHasList =
    new Immutable(
      hasLongs,
      hasList
    )

  def unapply(_item: HasHasList): Option[scala.Product2[Option[Seq[HasLong]], Option[HasList]]] = Some(_item)

  implicit val jsonReadCodec = new ReadCodec[HasHasList] {
    def read(json: Json) = {
      val map = ReadCodec.castOrThrow(json)
            val fieldValuehas_longs = map.getOrElse("has_longs", jnull)
            val fieldValuehas_list = map.getOrElse("has_list", jnull)
      
      HasHasList(      hasLongs = Try(com.persist.json.read[Option[Seq[HasLong]]](fieldValuehas_longs)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"has_longs/$path")
      }.get
      ,      hasList = Try(com.persist.json.read[Option[HasList]](fieldValuehas_list)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"has_list/$path")
      }.get
      
      )
    }
   }
  implicit val jsonWriteCodec = new WriteCodec[HasHasList] {
    def write(obj: HasHasList) = {
      val fields = List(        if(obj.hasLongs.isDefined) Some("has_longs" -> com.persist.json.toJson(obj.hasLongs.get)) else None
        ,        if(obj.hasList.isDefined) Some("has_list" -> com.persist.json.toJson(obj.hasList.get)) else None
        
      )
      fields.flatten.toMap
    }
  }

  import com.twitter.scrooge.serialization._

  implicit val thriftCodec = new ThriftCodec[HasHasList] {
    def decode(protocol: TProtocol): HasHasList = HasHasList.decode(protocol)
    def encode(obj: HasHasList, protocol: TProtocol) { HasHasList.encode(obj, protocol) }
  }

  private def readHasLongsValue(_iprot: TProtocol): Seq[HasLong] = {
    val _list = _iprot.readListBegin()
    if (_list.size == 0) {
      _iprot.readListEnd()
      Nil
    } else {
      val _rv = new mutable$ArrayBuffer[HasLong](_list.size)
      var _i = 0
      while (_i < _list.size) {
        _rv += {
            HasLong.decode(_iprot)
  
        }
        _i += 1
      }
      _iprot.readListEnd()
      _rv
    }
  }

  private def writeHasLongsField(hasLongs_item: Seq[HasLong], _oprot: TProtocol) {
    _oprot.writeFieldBegin(HasLongsField)
    writeHasLongsValue(hasLongs_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeHasLongsValue(hasLongs_item: Seq[HasLong], _oprot: TProtocol) {
    _oprot.writeListBegin(new TList(TType.STRUCT, hasLongs_item.size))
    hasLongs_item.foreach { hasLongs_item_element =>
      hasLongs_item_element.write(_oprot)
    }
    _oprot.writeListEnd()
  }

  private def readHasListValue(_iprot: TProtocol): HasList = {
    com.whitepages.generated.HasList.decode(_iprot)
  }

  private def writeHasListField(hasList_item: HasList, _oprot: TProtocol) {
    _oprot.writeFieldBegin(HasListField)
    writeHasListValue(hasList_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeHasListValue(hasList_item: HasList, _oprot: TProtocol) {
    hasList_item.write(_oprot)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[HasHasList] {
    override def encode(_item: HasHasList, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): HasHasList = HasHasList.decode(_iprot)

    import com.twitter.scrooge.serialization._

    implicit val thriftCodec = HasHasList.thriftCodec
  }

  /**
   * The default read-only implementation of HasHasList.  You typically should not need to
   * directly reference this class; instead, use the HasHasList.apply method to construct
   * new instances.
   */
  class Immutable(
    val hasLongs: Option[Seq[HasLong]],
    val hasList: Option[HasList],
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends HasHasList {
    def this(
      hasLongs: Option[Seq[HasLong]] = None,
      hasList: Option[HasList] = None
    ) = this(
      hasLongs,
      hasList,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the HasHasList trait with additional state or
   * behavior and implement the read-only methods from HasHasList using an underlying
   * instance.
   */
  trait Proxy extends HasHasList {
    protected def _underlying_HasHasList: HasHasList
    override def hasLongs: Option[Seq[HasLong]] = _underlying_HasHasList.hasLongs
    override def hasList: Option[HasList] = _underlying_HasHasList.hasList
    override def _passthroughFields = _underlying_HasHasList._passthroughFields
  }
}

trait HasHasList
  extends ThriftStruct
  with scala.Product2[Option[Seq[HasLong]], Option[HasList]]
  with java.io.Serializable
{
  import HasHasList._

  def hasLongs: Option[Seq[HasLong]]
  def hasList: Option[HasList]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = hasLongs
  def _2 = hasList

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (hasLongs.isDefined) {
              writeHasLongsValue(hasLongs.get, _oprot)
              Some(HasHasList.HasLongsField)
            } else {
              None
            }
          case 2 =>
            if (hasList.isDefined) {
              writeHasListValue(hasList.get, _oprot)
              Some(HasHasList.HasListField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): HasHasList = {
    var hasLongs: Option[Seq[HasLong]] = this.hasLongs
    var hasList: Option[HasList] = this.hasList
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        hasLongs = Some(readHasLongsValue(_blob.read))
      case 2 =>
        hasList = Some(readHasListValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      hasLongs,
      hasList,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): HasHasList = {
    var hasLongs: Option[Seq[HasLong]] = this.hasLongs
    var hasList: Option[HasList] = this.hasList

    _fieldId match {
      case 1 =>
        hasLongs = None
      case 2 =>
        hasList = None
      case _ =>
    }
    new Immutable(
      hasLongs,
      hasList,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetHasLongs: HasHasList = unsetField(1)

  def unsetHasList: HasHasList = unsetField(2)


  override def write(_oprot: TProtocol) {
    HasHasList.validate(this)
    _oprot.writeStructBegin(Struct)
    if (hasLongs.isDefined) writeHasLongsField(hasLongs.get, _oprot)
    if (hasList.isDefined) writeHasListField(hasList.get, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    hasLongs: Option[Seq[HasLong]] = this.hasLongs,
    hasList: Option[HasList] = this.hasList,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): HasHasList =
    new Immutable(
      hasLongs,
      hasList,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[HasHasList]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[HasHasList]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 2

  override def productElement(n: Int): Any = n match {
    case 0 => this.hasLongs
    case 1 => this.hasList
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "HasHasList"
}