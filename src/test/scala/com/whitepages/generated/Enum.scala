/**
 * Generated by Scrooge
 *   version: 3.16.40
 *   rev: c3bbc209edcec136fff0d50ec6d0bf27d31c6aa2
 *   built at: 20140917-102732
 */
package com.whitepages.generated

import com.twitter.scrooge.ThriftEnum

import com.persist.JsonOps._
import com.persist.json._
import com.persist.Exceptions.MappingException


@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
case object Enum {
  
  case object CoolValue extends com.whitepages.generated.Enum {
    val value = 42
    val name = "CoolValue"
    val originalName = "CoolValue"
  }
  
  case object OtherValue extends com.whitepages.generated.Enum {
    val value = 43
    val name = "OtherValue"
    val originalName = "OtherValue"
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * @throws NoSuchElementException if the value is not found.
   */
  def apply(value: Int): com.whitepages.generated.Enum = {
    value match {
      case 42 => com.whitepages.generated.Enum.CoolValue
      case 43 => com.whitepages.generated.Enum.OtherValue
      case _ => throw new NoSuchElementException(value.toString)
    }
  }

  /**
   * Find the enum by its integer value, as defined in the Thrift IDL.
   * Returns None if the value is not found
   */
  def get(value: Int): Option[com.whitepages.generated.Enum] = {
    value match {
      case 42 => scala.Some(com.whitepages.generated.Enum.CoolValue)
      case 43 => scala.Some(com.whitepages.generated.Enum.OtherValue)
      case _ => scala.None
    }
  }

  def valueOf(name: String): Option[com.whitepages.generated.Enum] = {
    name.toLowerCase match {
      case "coolvalue" => scala.Some(com.whitepages.generated.Enum.CoolValue)
      case "othervalue" => scala.Some(com.whitepages.generated.Enum.OtherValue)
      case _ => scala.None
    }
  }

  lazy val list: List[com.whitepages.generated.Enum] = scala.List[com.whitepages.generated.Enum](
    com.whitepages.generated.Enum.CoolValue,
    com.whitepages.generated.Enum.OtherValue
  )

import shapeless._
import syntax.typeable._

  implicit object JsonReadCodec extends ReadCodec[Enum] {
    def read (json: Json) = {
      val stringValue = json.cast[String].getOrElse(throw new MappingException(s"Expected json to be a String to parse into an Enum but found $json"))
      valueOf(stringValue).getOrElse(throw new MappingException(s"Could not parse enum Enum from String $stringValue"))
    }
  }
  implicit object JsonWriteCodec extends WriteCodec[Enum] {
    def write(obj: Enum) = obj.toString
  }
}



@javax.annotation.Generated(value = Array("com.twitter.scrooge.Compiler"))
sealed trait Enum extends ThriftEnum with Serializable