/**
 * Generated by Scrooge
 *   version: 3.16.40
 *   rev: c3bbc209edcec136fff0d50ec6d0bf27d31c6aa2
 *   built at: 20140917-102732
 */
package com.whitepages.generated

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

import com.persist.JsonOps._
import com.persist.json._
import com.persist.Exceptions.MappingException
import scala.util.Try


object Request extends ThriftStructCodec3[Request] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("Request")
  val Address1Field = new TField("address1", TType.STRING, 1)
  val Address1FieldManifest = implicitly[Manifest[String]]
  val Address2Field = new TField("address2", TType.STRING, 2)
  val Address2FieldManifest = implicitly[Manifest[String]]
  val LocationField = new TField("location", TType.STRING, 3)
  val LocationFieldManifest = implicitly[Manifest[String]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      Address1Field,
      false,
      Address1FieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      Address2Field,
      false,
      Address2FieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    ),
    new ThriftStructFieldInfo(
      LocationField,
      false,
      LocationFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: Request) {
  }

  def withoutPassthroughFields(original: Request): Request =
    new Immutable(
      address1 =
        {
          val field = original.address1
          field
        },
      address2 =
        {
          val field = original.address2
          field
        },
      location =
        {
          val field = original.location
          field
        }
    )

  override def encode(_item: Request, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): Request = {
    var address1: String = null
    var address2: String = null
    var location: String = null
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRING => {
                address1 = readAddress1Value(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'address1' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 2 =>
            _field.`type` match {
              case TType.STRING => {
                address2 = readAddress2Value(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'address2' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case 3 =>
            _field.`type` match {
              case TType.STRING => {
                location = readLocationValue(_iprot)
              }
              case _actualType =>
                val _expectedType = TType.STRING
            
                throw new TProtocolException(
                  "Received wrong type for field 'location' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      address1,
      address2,
      location,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    address1: String,
    address2: String,
    location: String
  ): Request =
    new Immutable(
      address1,
      address2,
      location
    )

  def unapply(_item: Request): Option[scala.Product3[String, String, String]] = Some(_item)

  implicit val jsonReadCodec = new ReadCodec[Request] {
    def read(json: Json) = {
      val map = ReadCodec.castOrThrow(json)
            val fieldValueaddress1 = map.getOrElse("address1", throw new MappingException(s"Expected field address1 on JsonObject $map"))
            val fieldValueaddress2 = map.getOrElse("address2", throw new MappingException(s"Expected field address2 on JsonObject $map"))
            val fieldValuelocation = map.getOrElse("location", throw new MappingException(s"Expected field location on JsonObject $map"))
      
      Request(      address1 = Try(com.persist.json.read[String](fieldValueaddress1)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"address1/$path")
      }.get
      ,      address2 = Try(com.persist.json.read[String](fieldValueaddress2)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"address2/$path")
      }.get
      ,      location = Try(com.persist.json.read[String](fieldValuelocation)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"location/$path")
      }.get
      
      )
    }
   }
  implicit val jsonWriteCodec = new WriteCodec[Request] {
    def write(obj: Request) = {
      val fields = List(        
        Some("address1" -> com.persist.json.toJson(obj.address1)),        
        Some("address2" -> com.persist.json.toJson(obj.address2)),        
        Some("location" -> com.persist.json.toJson(obj.location))
      )
      fields.flatten.toMap
    }
  }

  import com.twitter.scrooge.serialization._

  implicit val thriftCodec = new ThriftCodec[Request] {
    def decode(protocol: TProtocol): Request = Request.decode(protocol)
    def encode(obj: Request, protocol: TProtocol) { Request.encode(obj, protocol) }
  }

  private def readAddress1Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeAddress1Field(address1_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(Address1Field)
    writeAddress1Value(address1_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAddress1Value(address1_item: String, _oprot: TProtocol) {
    _oprot.writeString(address1_item)
  }

  private def readAddress2Value(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeAddress2Field(address2_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(Address2Field)
    writeAddress2Value(address2_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeAddress2Value(address2_item: String, _oprot: TProtocol) {
    _oprot.writeString(address2_item)
  }

  private def readLocationValue(_iprot: TProtocol): String = {
    _iprot.readString()
  }

  private def writeLocationField(location_item: String, _oprot: TProtocol) {
    _oprot.writeFieldBegin(LocationField)
    writeLocationValue(location_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeLocationValue(location_item: String, _oprot: TProtocol) {
    _oprot.writeString(location_item)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[Request] {
    override def encode(_item: Request, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): Request = Request.decode(_iprot)

    import com.twitter.scrooge.serialization._

    implicit val thriftCodec = Request.thriftCodec
  }

  /**
   * The default read-only implementation of Request.  You typically should not need to
   * directly reference this class; instead, use the Request.apply method to construct
   * new instances.
   */
  class Immutable(
    val address1: String,
    val address2: String,
    val location: String,
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends Request {
    def this(
      address1: String,
      address2: String,
      location: String
    ) = this(
      address1,
      address2,
      location,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the Request trait with additional state or
   * behavior and implement the read-only methods from Request using an underlying
   * instance.
   */
  trait Proxy extends Request {
    protected def _underlying_Request: Request
    override def address1: String = _underlying_Request.address1
    override def address2: String = _underlying_Request.address2
    override def location: String = _underlying_Request.location
    override def _passthroughFields = _underlying_Request._passthroughFields
  }
}

trait Request
  extends ThriftStruct
  with scala.Product3[String, String, String]
  with java.io.Serializable
{
  import Request._

  def address1: String
  def address2: String
  def location: String

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = address1
  def _2 = address2
  def _3 = location

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (address1 ne null) {
              writeAddress1Value(address1, _oprot)
              Some(Request.Address1Field)
            } else {
              None
            }
          case 2 =>
            if (address2 ne null) {
              writeAddress2Value(address2, _oprot)
              Some(Request.Address2Field)
            } else {
              None
            }
          case 3 =>
            if (location ne null) {
              writeLocationValue(location, _oprot)
              Some(Request.LocationField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): Request = {
    var address1: String = this.address1
    var address2: String = this.address2
    var location: String = this.location
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        address1 = readAddress1Value(_blob.read)
      case 2 =>
        address2 = readAddress2Value(_blob.read)
      case 3 =>
        location = readLocationValue(_blob.read)
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      address1,
      address2,
      location,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): Request = {
    var address1: String = this.address1
    var address2: String = this.address2
    var location: String = this.location

    _fieldId match {
      case 1 =>
        address1 = null
      case 2 =>
        address2 = null
      case 3 =>
        location = null
      case _ =>
    }
    new Immutable(
      address1,
      address2,
      location,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetAddress1: Request = unsetField(1)

  def unsetAddress2: Request = unsetField(2)

  def unsetLocation: Request = unsetField(3)


  override def write(_oprot: TProtocol) {
    Request.validate(this)
    _oprot.writeStructBegin(Struct)
    if (address1 ne null) writeAddress1Field(address1, _oprot)
    if (address2 ne null) writeAddress2Field(address2, _oprot)
    if (location ne null) writeLocationField(location, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    address1: String = this.address1,
    address2: String = this.address2,
    location: String = this.location,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): Request =
    new Immutable(
      address1,
      address2,
      location,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[Request]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[Request]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 3

  override def productElement(n: Int): Any = n match {
    case 0 => this.address1
    case 1 => this.address2
    case 2 => this.location
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "Request"
}