/**
 * Generated by Scrooge
 *   version: 3.16.40
 *   rev: c3bbc209edcec136fff0d50ec6d0bf27d31c6aa2
 *   built at: 20140917-102732
 */
package com.whitepages.generated

import com.twitter.scrooge.{
  TFieldBlob, ThriftException, ThriftStruct, ThriftStructCodec3, ThriftStructFieldInfo, ThriftUtil}
import org.apache.thrift.protocol._
import org.apache.thrift.transport.{TMemoryBuffer, TTransport}
import java.nio.ByteBuffer
import java.util.Arrays
import scala.collection.immutable.{Map => immutable$Map}
import scala.collection.mutable.Builder
import scala.collection.mutable.{
  ArrayBuffer => mutable$ArrayBuffer, Buffer => mutable$Buffer,
  HashMap => mutable$HashMap, HashSet => mutable$HashSet}
import scala.collection.{Map, Set}

import com.persist.JsonOps._
import com.persist.json._
import com.persist.Exceptions.MappingException
import scala.util.Try


object HasHasMap extends ThriftStructCodec3[HasHasMap] {
  private val NoPassthroughFields = immutable$Map.empty[Short, TFieldBlob]
  val Struct = new TStruct("HasHasMap")
  val HasMapField = new TField("hasMap", TType.STRUCT, 1)
  val HasMapFieldManifest = implicitly[Manifest[HasMap]]

  /**
   * Field information in declaration order.
   */
  lazy val fieldInfos: scala.List[ThriftStructFieldInfo] = scala.List[ThriftStructFieldInfo](
    new ThriftStructFieldInfo(
      HasMapField,
      true,
      HasMapFieldManifest,
      None,
      None,
      immutable$Map(
      ),
      immutable$Map(
      )
    )
  )

  lazy val structAnnotations: immutable$Map[String, String] =
    immutable$Map[String, String](
    )

  /**
   * Checks that all required fields are non-null.
   */
  def validate(_item: HasHasMap) {
  }

  def withoutPassthroughFields(original: HasHasMap): HasHasMap =
    new Immutable(
      hasMap =
        {
          val field = original.hasMap
          field.map { field =>
            HasMap.withoutPassthroughFields(field)
          }
        }
    )

  override def encode(_item: HasHasMap, _oproto: TProtocol) {
    _item.write(_oproto)
  }

  override def decode(_iprot: TProtocol): HasHasMap = {
    var hasMap: Option[HasMap] = None
    var _passthroughFields: Builder[(Short, TFieldBlob), immutable$Map[Short, TFieldBlob]] = null
    var _done = false

    _iprot.readStructBegin()
    while (!_done) {
      val _field = _iprot.readFieldBegin()
      if (_field.`type` == TType.STOP) {
        _done = true
      } else {
        _field.id match {
          case 1 =>
            _field.`type` match {
              case TType.STRUCT => {
                hasMap = Some(readHasMapValue(_iprot))
              }
              case _actualType =>
                val _expectedType = TType.STRUCT
            
                throw new TProtocolException(
                  "Received wrong type for field 'hasMap' (expected=%s, actual=%s).".format(
                    ttypeToHuman(_expectedType),
                    ttypeToHuman(_actualType)
                  )
                )
            }
          case _ =>
            if (_passthroughFields == null)
              _passthroughFields = immutable$Map.newBuilder[Short, TFieldBlob]
            _passthroughFields += (_field.id -> TFieldBlob.read(_field, _iprot))
        }
        _iprot.readFieldEnd()
      }
    }
    _iprot.readStructEnd()

    new Immutable(
      hasMap,
      if (_passthroughFields == null)
        NoPassthroughFields
      else
        _passthroughFields.result()
    )
  }

  def apply(
    hasMap: Option[HasMap] = None
  ): HasHasMap =
    new Immutable(
      hasMap
    )

  def unapply(_item: HasHasMap): Option[Option[HasMap]] = Some(_item.hasMap)

  implicit val jsonReadCodec = new ReadCodec[HasHasMap] {
    def read(json: Json) = {
      val map = ReadCodec.castOrThrow(json)
            val fieldValuehas_map = map.getOrElse("has_map", jnull)
      
      HasHasMap(      hasMap = Try(com.persist.json.read[Option[HasMap]](fieldValuehas_map)).recover {
        case MappingException(msg, path) => throw MappingException(msg, s"has_map/$path")
      }.get
      
      )
    }
   }
  implicit val jsonWriteCodec = new WriteCodec[HasHasMap] {
    def write(obj: HasHasMap) = {
      val fields = List(        if(obj.hasMap.isDefined) Some("has_map" -> com.persist.json.toJson(obj.hasMap.get)) else None
        
      )
      fields.flatten.toMap
    }
  }

  import com.twitter.scrooge.serialization._

  implicit val thriftCodec = new ThriftCodec[HasHasMap] {
    def decode(protocol: TProtocol): HasHasMap = HasHasMap.decode(protocol)
    def encode(obj: HasHasMap, protocol: TProtocol) { HasHasMap.encode(obj, protocol) }
  }

  private def readHasMapValue(_iprot: TProtocol): HasMap = {
    com.whitepages.generated.HasMap.decode(_iprot)
  }

  private def writeHasMapField(hasMap_item: HasMap, _oprot: TProtocol) {
    _oprot.writeFieldBegin(HasMapField)
    writeHasMapValue(hasMap_item, _oprot)
    _oprot.writeFieldEnd()
  }

  private def writeHasMapValue(hasMap_item: HasMap, _oprot: TProtocol) {
    hasMap_item.write(_oprot)
  }



  private def ttypeToHuman(byte: Byte) = {
    // from https://github.com/apache/thrift/blob/master/lib/java/src/org/apache/thrift/protocol/TType.java
    byte match {
      case TType.STOP   => "STOP"
      case TType.VOID   => "VOID"
      case TType.BOOL   => "BOOL"
      case TType.BYTE   => "BYTE"
      case TType.DOUBLE => "DOUBLE"
      case TType.I16    => "I16"
      case TType.I32    => "I32"
      case TType.I64    => "I64"
      case TType.STRING => "STRING"
      case TType.STRUCT => "STRUCT"
      case TType.MAP    => "MAP"
      case TType.SET    => "SET"
      case TType.LIST   => "LIST"
      case TType.ENUM   => "ENUM"
      case _            => "UNKNOWN"
    }
  }

  object Immutable extends ThriftStructCodec3[HasHasMap] {
    override def encode(_item: HasHasMap, _oproto: TProtocol) { _item.write(_oproto) }
    override def decode(_iprot: TProtocol): HasHasMap = HasHasMap.decode(_iprot)

    import com.twitter.scrooge.serialization._

    implicit val thriftCodec = HasHasMap.thriftCodec
  }

  /**
   * The default read-only implementation of HasHasMap.  You typically should not need to
   * directly reference this class; instead, use the HasHasMap.apply method to construct
   * new instances.
   */
  class Immutable(
    val hasMap: Option[HasMap],
    override val _passthroughFields: immutable$Map[Short, TFieldBlob]
  ) extends HasHasMap {
    def this(
      hasMap: Option[HasMap] = None
    ) = this(
      hasMap,
      Map.empty
    )
  }

  /**
   * This Proxy trait allows you to extend the HasHasMap trait with additional state or
   * behavior and implement the read-only methods from HasHasMap using an underlying
   * instance.
   */
  trait Proxy extends HasHasMap {
    protected def _underlying_HasHasMap: HasHasMap
    override def hasMap: Option[HasMap] = _underlying_HasHasMap.hasMap
    override def _passthroughFields = _underlying_HasHasMap._passthroughFields
  }
}

trait HasHasMap
  extends ThriftStruct
  with scala.Product1[Option[HasMap]]
  with java.io.Serializable
{
  import HasHasMap._

  def hasMap: Option[HasMap]

  def _passthroughFields: immutable$Map[Short, TFieldBlob] = immutable$Map.empty

  def _1 = hasMap

  /**
   * Gets a field value encoded as a binary blob using TCompactProtocol.  If the specified field
   * is present in the passthrough map, that value is returend.  Otherwise, if the specified field
   * is known and not optional and set to None, then the field is serialized and returned.
   */
  def getFieldBlob(_fieldId: Short): Option[TFieldBlob] = {
    lazy val _buff = new TMemoryBuffer(32)
    lazy val _oprot = new TCompactProtocol(_buff)
    _passthroughFields.get(_fieldId) orElse {
      val _fieldOpt: Option[TField] =
        _fieldId match {
          case 1 =>
            if (hasMap.isDefined) {
              writeHasMapValue(hasMap.get, _oprot)
              Some(HasHasMap.HasMapField)
            } else {
              None
            }
          case _ => None
        }
      _fieldOpt match {
        case Some(_field) =>
          val _data = Arrays.copyOfRange(_buff.getArray, 0, _buff.length)
          Some(TFieldBlob(_field, _data))
        case None =>
          None
      }
    }
  }

  /**
   * Collects TCompactProtocol-encoded field values according to `getFieldBlob` into a map.
   */
  def getFieldBlobs(ids: TraversableOnce[Short]): immutable$Map[Short, TFieldBlob] =
    (ids flatMap { id => getFieldBlob(id) map { id -> _ } }).toMap

  /**
   * Sets a field using a TCompactProtocol-encoded binary blob.  If the field is a known
   * field, the blob is decoded and the field is set to the decoded value.  If the field
   * is unknown and passthrough fields are enabled, then the blob will be stored in
   * _passthroughFields.
   */
  def setField(_blob: TFieldBlob): HasHasMap = {
    var hasMap: Option[HasMap] = this.hasMap
    var _passthroughFields = this._passthroughFields
    _blob.id match {
      case 1 =>
        hasMap = Some(readHasMapValue(_blob.read))
      case _ => _passthroughFields += (_blob.id -> _blob)
    }
    new Immutable(
      hasMap,
      _passthroughFields
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetField(_fieldId: Short): HasHasMap = {
    var hasMap: Option[HasMap] = this.hasMap

    _fieldId match {
      case 1 =>
        hasMap = None
      case _ =>
    }
    new Immutable(
      hasMap,
      _passthroughFields - _fieldId
    )
  }

  /**
   * If the specified field is optional, it is set to None.  Otherwise, if the field is
   * known, it is reverted to its default value; if the field is unknown, it is subtracked
   * from the passthroughFields map, if present.
   */
  def unsetHasMap: HasHasMap = unsetField(1)


  override def write(_oprot: TProtocol) {
    HasHasMap.validate(this)
    _oprot.writeStructBegin(Struct)
    if (hasMap.isDefined) writeHasMapField(hasMap.get, _oprot)
    _passthroughFields.values foreach { _.write(_oprot) }
    _oprot.writeFieldStop()
    _oprot.writeStructEnd()
  }

  def copy(
    hasMap: Option[HasMap] = this.hasMap,
    _passthroughFields: immutable$Map[Short, TFieldBlob] = this._passthroughFields
  ): HasHasMap =
    new Immutable(
      hasMap,
      _passthroughFields
    )

  override def canEqual(other: Any): Boolean = other.isInstanceOf[HasHasMap]

  override def equals(other: Any): Boolean =
    _root_.scala.runtime.ScalaRunTime._equals(this, other) &&
      _passthroughFields == other.asInstanceOf[HasHasMap]._passthroughFields

  override def hashCode: Int = _root_.scala.runtime.ScalaRunTime._hashCode(this)

  override def toString: String = _root_.scala.runtime.ScalaRunTime._toString(this)


  override def productArity: Int = 1

  override def productElement(n: Int): Any = n match {
    case 0 => this.hasMap
    case _ => throw new IndexOutOfBoundsException(n.toString)
  }

  override def productPrefix: String = "HasHasMap"
}